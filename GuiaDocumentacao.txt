Guia Para ler Documentação.

1) Qual a diferença entre Composição e Herança?
Composição é uma classe que se torna atributo de outra Ex: Uma televisão TEM controle?, então é composição, controle será atributo de Televisão.
Herança, uma classe que se extende de outra. Ex: Funcionario É UMA  pessoa ? então fica assim : funcionario extends pessoa, herdando os seus atributos.


2) Qual é a diferença entre variáveis e atributos?
Atributos são características de uma classe
Variáveis são espaços de memória para armazenamento de dados, nomeados por identificador do tipo int, string, double. Quase um atributo se podemos assim dizer.

3) Quais são os modificadores de acesso?
Public, private, protected e padrão.

4) Para que serve uma Interface?
Para estabelecer contratos entre as classes, especificar os métodos que precisam ser criados e os obrigar a serem criados.

5) Qual diferença entre métodos estáticos e os métodos não estáticos?
Resposta:
Um método estático só é possível acessar outros métodos ou variáveis do tipo estático,  e para chamá-lo, 
basta chamar a classe e colocar um ponto e em seguida inserir o nome do método.
Exemplo: exemplo.exporExemplo();
Enquanto, com um método não estático/método de instância,  é necessário instanciar a classe para usar o método.

https://javabymarcao.wordpress.com/2012/09/27/teoria-diferenca-entre-metodos-estaticos-e-nao-estaticos/
https://pt.stackoverflow.com/questions/54012/qual-a-fun%C3%A7%C3%A3o-de-um-m%C3%A9todo-est%C3%A1tico

Um método estático pertence à classe e um método não estático pertence ao objeto de uma classe. Ou seja, um método não estático pode ser chamado apenas em um objeto de uma classe à qual ele pertence. Um método estático pode acessar apenas membros estáticos. Um método não estático pode acessar membros estáticos e não estáticos porque, no momento em que o método estático é chamado, a classe pode não ser instanciada (se for chamada na própria classe). No outro caso, um método não estático só pode ser chamado quando a classe já tiver sido instanciada. Um método estático é compartilhado por todas as instâncias da classe. Sempre que um método é chamado em C++/Java/C #, um argumento implícito (a referência 'this') é passado junto com/sem os outros parâmetros. No caso de uma chamada de método estático, a referência 'this' não é passada, pois os métodos estáticos pertencem a uma classe e, portanto, não possuem a referência 'this'.


6) Por que métodos estáticos não interagem com atributos que não são estáticos?
Métodos estáticos é um método que vive na classe. Então é um método que não pode usar nenhum atributo do objeto e geralmente é usado para fazer operações que não dependem de nenhum estado. 
https://alvinalexander.com/blog/post/java/compiler-error-cannot-make-static-reference-to-non-static/
https://cursos.alura.com.br/forum/topico-atributos-e-metodos-estaticos-38826

Os métodos estáticos são métodos que não dependem de um objeto. Tais métodos são chamados sem que haja uma instância da classe que declara o método.
Como o método estático não possui ligação com um objeto, então o método não pode usar variáveis de instância, que são variáveis de um objeto.


7) Para que serve o @Override?
Sobescrever métodos, ex: Classes que podem usar basicamente o mesmo método, aí usamos o usamos, para informar que estamos pegando aquele metodo semelhante de uma outra classe.

8) O que significa SOLID?
São 5 acrónimos que norteiam o bom seguimento de um projeto em POO.
S - Single Responsibility Principle (Princípio de Responsabilidade Única)
Uma classe deve ter um, e somente um, motivo para mudar.
Esse princípio declara que uma classe deve ser especializada em um único assunto e possuir apenas uma responsabilidade dentro do software, 
ou seja, a classe deve ter uma única tarefa ou ação para executar.

O - Open Closed Principle (Princípio de Aberto-Fechado)
Objetos ou entidades devem estar abertos para extensão, mas fechados para modificações, ou seja, quando novos comportamentos e recursos 
precisam ser adicionados no software devemos estender alterar o código fonte original.

L  - Liskov Substitution Principle (Princípio da substituição de Liskov)
Uma classe derivada deve ser substituível por sua classe base. O princípio da substituição de Liskov foi introduzido por Barbar Liskov 
em sua conferência “Data abstraction” em 1987. A definição formal de Liskov diz que: Se para cada objeto  do tipo S há um objeto.

I - Interface Segregation Principle (Princípio de Segregação da Interface) 
Uma classe não deve ser forçada a implementar interfaces e métodos que não irão utilizar.
Esse princípio basicamente diz que é melhor criar interfaces mais específicas ao invés de termos uma única interface genérica.

D - Dependency Inversion Principle -
Depende de abstrações e não de implementações.
No contexto da programação orientada a objetos, é comum que as pessoas confundam a  Inversão de Dependência com a Injeção de Dependência, 
porém são coisas distintas, mas que relacionam-se entre si com um propósito em comum, deixar o código desacoplado.

9) Como montar um exemplo para explicar o S do SOLID?
Responsabilidade única. Uma classe deve ter uma única responsabilidade, função, tarefa.

10) Quais são as camadas do Spring Boot quando vamos trabalhar com API REST?
Service, Controller, Repository, Advice

11) O que é injeção de dependência?
Quando chamamos uma classe dentro de outra sem precisar instancia-la, ex: a repository na service, service na controller, aí usamos o @Autowired.


12) Injeção de dependência faz parte do SOLID?
A Inversão de Dependência é um princípio (Conceito) e a Injeção de Dependência é um padrão de projeto (Design Pattern).

13) Qual camada é responsável em verificar se a requisição está correta ou não?
Controller

14) Quais são as partes de uma requisição HTTP?
Request URL, Method, Body, Headers

15) Quais são as partes de uma resposta HTTP?
IP response, Status, Body, Headers

16) O que é um endpoint?
Endereço Web (URL) - Texto que digitamos para encontrar algum site, página ou serviço.

17) O que significa quando a Aplicação responde o http status code 405?
405 Method Not Allowed - O método de solicitação é conhecido pelo servidor, mas foi desativado e não pode ser usado. Os dois métodos obrigatórios, GET e HEAD, nunca devem ser desabilitados e não devem retornar este código de erro.

18) Quem é responsável em controlar as exceções que saem da aplicação?
Controller Advice. Exception

19) Uma DTO serve para que?
-Transferência de dados que transita entre as camadas de negócio. Ao invés de ficar transportando uma renca de objetos um de cada vez, vc coloca todos os objetos (ou os dados dele) em uma objeto só, e passa para o servidor. Então vc perde menos tempo com o transporte de dados.
Ao invés de acessar um servidor 3 vezes, vc acessou 1 só. É para isso quer serve um DTO. Serve para quando se precisa fazer muitos acessos.

20) Para que serve as models?
Modelo de dados, onde se faz a tabela, entidade.

21) Como consigo relacionar 2 tabelas em um banco de dados relacional?
Fazendo relacionamentos, sendo eles oneToMany, ManyToOne ou ManyToMany.
Através da chave primária, que será a FK na tabela onde será feito o relacionamento.

22) Por que é importante existir um usuário com acesso limitado ao SGBD para aplicação?
Para não fazer coisa que não devia, tipo: apagar o banco de dados.

23) Qual o nome da camada responsável em se comunicar com o banco de dados?
Repository
 
24) O que é Hibernate?
é o framework para persistência de dados.

25) O que é ORM?
Object-Relational Mapping (ORM) mapeamento objeto-relacional. Geralmente é uma biblioteca ou framework que ajuda no mapeamento e uso do banco de dados.

26) Para que serve o application.properties?
Para configurar o banco de dados e costumizar as mensagens de validações.

27) Para que serve o @RequestMapping?
-implementar o nome da URL
Serve para manipulação de requisições. Um método mapeado com a anotação @RequestMapping deverá ter algum retorno que, por sua vez, será exibido ao usuário. Esse retorno pode ser de vários formatos: uma página de hipertexto, um arquivo (XML, JSON, JPEG, PDF), entre outros. 

28) Para que serve o @PostMapping?
CONFLITOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

29) Para que serve o @RequestBody?
-Recebe informações no corpo da requisição

30) O que é um Proxy Pattern e qual a camada que o representa?
